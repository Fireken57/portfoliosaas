// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tables Supabase par défaut
model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  resetToken        String?   @unique
  resetTokenExpiry  DateTime?
  portfolios        Portfolio[]
  alerts            Alert[]
  watchlists        Watchlist[]
}

model Portfolio {
  id          String    @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  positions   Position[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Position {
  id          String   @id @default(cuid())
  symbol      String
  quantity    Float
  avgPrice    Float
  portfolioId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

model Alert {
  id            String   @id @default(cuid())
  type          String
  symbol        String
  condition     String
  value         Float
  triggered     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  triggeredAt   DateTime?
  message       String?
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  indicatorType String?
  period        Int?
  signalPeriod  Int?
  fastPeriod    Int?
  slowPeriod    Int?
  stdDev        Float?
  kPeriod       Int?
  dPeriod       Int?

  @@index([userId])
  @@index([symbol])
}

model Watchlist {
  id        String   @id @default(cuid())
  name      String
  symbols   String   // Stocké comme une chaîne séparée par des virgules
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
} 