// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = "prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGlfa2V5IjoiMDFKWFRRWkdGS1pGR0dTWDlaU1g0MEZNRFEiLCJ0ZW5hbnRfaWQiOiI0MDI0NzdlNjk2NWVhNzg2NTI4ZjkxODY5Y2VhOTcxMTM1YTZkZDBhNjhmZTc3MDBhZTU4ODFiZDEwMjk4YzA2IiwiaW50ZXJuYWxfc2VjcmV0IjoiZjAwNWYwMTctMzRjOS00YjVkLThhYzMtODczOWIwYWRiN2I2In0.tssVD50Lq3g_Vqfv4mC_GW_WiBxwGgrpSWOO5PQTudY"
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  password          String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  resetToken        String?   @unique
  resetTokenExpiry  DateTime?
  accounts          Account[]
  sessions          Session[]
  portfolios        Portfolio[]
  alerts            Alert[]
  watchlists        Watchlist[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Portfolio {
  id          String    @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  positions   Position[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Position {
  id          String   @id @default(cuid())
  symbol      String
  quantity    Float
  avgPrice    Float
  portfolioId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

model Alert {
  id            String   @id @default(cuid())
  type          String
  symbol        String
  condition     String
  value         Float
  triggered     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  triggeredAt   DateTime?
  message       String?
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  indicatorType String?
  period        Int?
  signalPeriod  Int?
  fastPeriod    Int?
  slowPeriod    Int?
  stdDev        Float?
  kPeriod       Int?
  dPeriod       Int?

  @@index([userId])
  @@index([symbol])
}

model Watchlist {
  id        String   @id @default(cuid())
  name      String
  symbols   String   // Stocké comme une chaîne séparée par des virgules
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
} 